{"version":3,"sources":["components/About/About.js","components/Lissajous/Lissajous.js","components/App/App.js","serviceWorker.js","index.js"],"names":["About","className","href","target","rel","Component","Lissajous","props","Sketch","sketch","x","oldX","phi","angle","y","w","maxDist","oldY","setup","createCanvas","smooth","strokeCap","ROUND","frameRate","sqrt","sq","width","height","draw","background","translate","strokeWeight","stroke","fill","i","map","TWO_PI","sin","radians","cos","dist","lineAlpha","line","myRef","React","createRef","this","myp5","p5","current","ref","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.282cc8f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n\n    render () {\n\n        return (\n            <div className=\"about\">\n            <div className=\"connect\">\n                <a href=\"https://github.com/rlh74/hello-lissajous\" target=\"_blank\" rel=\"noopener noreferrer\">Project Repository</a> <br/>\n                <a href=\"https://github.com/rlh74\" target=\"_blank\" rel=\"noopener noreferrer\">Github profile</a><br />\n                <a href=\"https://www.linkedin.com/in/rosshutchens/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a><br />\n            </div>\n            <div className=\"info\">\n                Hello and welcome! Lissajous curves are an expression of parametric equations which describe complex harmonic motion.<br/><br/>\n                My fascination with them came from working with audio synthesizers, particularly the process of FM (frequency modulation) synthesis and its origins in radio communication. \n                Here, I am using P5.js which is a client-side JavaScript library of Processing, a coding tool developed for visual artists built with Java.\n                The figure is composed by the modulating the amplitude of a signal (x) and a carrier (y), of which the respective variables are then modulated by a pair of frequencies -- in this example I am swapping the frequencies used for the signal and carrier input.<br/><br/>\n                I chose two frequencies with an intervalic relationship that I frequent with audio synthesis -- it is interesting to witness the visual representation of that relationship!\n                To create the animation effect, I am incrementally increasing the phase of the signal frequency and resetting it to 0 as it approaches 360.\n\n            </div>  \n            </div>\n        );\n    \n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport p5 from 'p5';\nimport './Lissajous.css'\n\nclass Lissajous extends Component {\n\n    constructor(props){\n        super(props)\n        this.myRef = React.createRef()\n    }\n\n    Sketch = (sketch) => {\n\n        let pointCount = 800;\n        let freqX = 13;\n        let freqY = 8;\n        let phi = 0;\n        \n        let modFreqX = 8;\n        let modFreqY = 13;\n\n        let angle = null;\n        let x, y = 0;\n        let w = null;\n        let maxDist = null;\n        let oldX, oldY = 0;\n\n        \n        sketch.setup = () => {\n            // sketch.frameRate(60);\n            //noLoop();\n            sketch.createCanvas(600, 600);\n            sketch.smooth();\n            sketch.strokeCap(sketch.ROUND);\n            sketch.frameRate(5);\n            maxDist = sketch.sqrt(sketch.sq(sketch.width/2-50) + sketch.sq(sketch.height/2-50));\n        }\n        \n        sketch.draw = () => {\n            // setTimeout(sketch.draw, 50);\n            // requestAnimationFrame(sketch.draw);\n            sketch.background(152, 150, 138);\n            sketch.translate(sketch.width/2, sketch.height/2);\n            \n            sketch.strokeWeight(8);\n            sketch.stroke('rgb(0,255,0)');\n            sketch.fill(150);\n            for (let i=0; i<=pointCount; i++){\n                angle = sketch.map(i, 0,pointCount, 0,sketch.TWO_PI);\n                \n                // amplitude modulation\n                x = sketch.sin(angle * freqX + sketch.radians(phi)) * sketch.cos(angle * modFreqX);\n                y = sketch.sin(angle * freqY) * sketch.cos(angle * modFreqY);\n                \n                x = x * (sketch.width/2-50);\n                y = y * (sketch.height/2-50);\n                \n                if (i > 0) {\n                w = sketch.dist(x, y, 0, 0);\n                let lineAlpha = sketch.map(w, 0,maxDist, 255,0);\n                sketch.stroke(i%2*2, lineAlpha);\n                sketch.line(oldX, oldY, x, y);\n                }\n                oldX = x;\n                oldY = y;\n                phi = phi + 0.0005;\n                if (phi > 359.995) {\n                    phi = 0;\n                }\n                // incrementPhi();\n                \n                //while (phi > 0) {\n                //  phi = phi + 1;    \n                //}\n            }   \n        \n        }\n        \n        // sketch.incrementPhi = () => {\n        // let fPhi = 0.0005;\n        // phi = phi + fPhi;\n        // // sketch.print(\"in increment Phi: \" + phi);\n        // if (phi > 360) {\n        //     phi = 0;\n        //     }\n        // }\n\n    };\n\n    componentDidMount(){\n        this.myp5 = new p5(this.Sketch, this.myRef.current)\n    }\n\n    render(){\n        return(\n            <div className=\"render\" ref={this.myRef}>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Lissajous;\n","import React, { Component } from 'react';\nimport About from '../About/About';\nimport Lissajous from '../Lissajous/Lissajous';\nimport './App.css';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n\n    render () {\n        return (\n            <>\n            <Router>\n                <div className=\"navigation\">\n                    <Link className=\"nav-link\" to=\"/\">Figure</Link>\n                    <Link className=\"nav-link\" to=\"/about\">About</Link>\n                </div>\n            <main>\n            <Route exact path = \"/\" component={Lissajous}/>\n            <Route exact path = \"/about\" component={About}/>\n            </main>\n            </Router>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}